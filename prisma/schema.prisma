generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(cuid())
  username             String
  email                String     @unique
  emailVerified        Boolean?   @default(false)
  role                 String     @default("user")
  password             String?
  image                String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  reviews              Review[]
  courses              Course[]
  orders               Order[]
  payments             Payments[]
  // SubscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  // subscriptionPlanId String?
  subscriptionProvider String? // stripe, paypal, mercadopago
  subscriptionId       String? // id de la suscripcion en stripe, paypal, mercadopago //1
  status               String? // ACTIVE, CANCELLED, PENDING 
  startedAt            DateTime? // fecha de inicio de la suscripcion
  userSubscriptionId   Int?
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String // basico, premium, gold
  description String
  price       Float
  created_at  DateTime @default(now())
  // users       User[]
}

model Course {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  description    String
  imageUrl       String
  price          Float
  oldPrice       Float?           @default(0.00)
  vote           Float
  bestSeller     Boolean?         @default(false)
  categoryId     String
  courseCategory Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  attachments    Attachment[]
  reviews        Review[]
  popularThemes  CourseCategory[]
  orderDetails   OrderDetails[]
  Chapter        Chapter[]
}

model Category {
  id            String           @id @default(cuid())
  name          String           @unique
  description   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  courses       Course[]
  popularThemes CourseCategory[]
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  duration  String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([chapterId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  commentary String
  image      String
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([courseId])
  @@index([userId])
}

model Payments {
  id         String   @id @default(cuid())
  total      Float
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  created_at DateTime @default(now())
}

model Order {
  id           String         @id @default(cuid())
  total        Float
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  created_at   DateTime       @default(now())
  status       String
  payments     Payments[]
  orderDetails OrderDetails[]
}

model OrderDetails {
  id         String   @id @default(cuid())
  quantity   Int
  price      Float
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  created_at DateTime @default(now())
}

model CourseCategory {
  id             String   @id @default(cuid())
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  categoryId     String
  courseCategory Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  popularTheme   String
  createdAt      DateTime @default(now())
}

model Chapter {
  id          String       @id @default(cuid())
  title       String
  content     String
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  classes     Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
}
